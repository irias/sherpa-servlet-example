package nl.irias;

import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;

import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.DefaultServlet;
import com.fasterxml.jackson.databind.ObjectMapper;

import nl.irias.sherpa.*;

public class SherpaServletExample {
	final static boolean DEV = true;  // fixme: read from environment
	final static boolean SHOW_SHERPA_ERRORS = DEV;
	final static String BIND = "0.0.0.0";
	final static int PORT = 8080;
	final static String VERSION = "0.2.0";

	static class SherpaThrowableFormatter implements ThrowableFormatter {
		@Override
		public String format(Throwable t) {
			if (SHOW_SHERPA_ERRORS) {
				return t.toString();
			}
			return "An error occurred. Please try again later, or contact us.";
		}
	}

	static class ExceptionTransformer implements SherpaExceptionTransformer {
		@Override
		public Exception transform(Exception e) {
			// fixme: check for exception types.  for example, check SQLException, and return a gentle SherpaUserException when unique constraints were violated...
			return e;
		}
	}

	public static void main(String[] args) {
		// Need to manually exit. The jvm just hangs when main throws an exception...
		try {
			_main(args);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public static void _main(String[] args) throws Exception {
		// Use jetty as HTTP server that serves our servlet, making this app self-contained (if you make a jar that includes dependencies).
		org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server(new InetSocketAddress(BIND, PORT));

		// Configure jetty to look for static files in our resources directory.
		ServletContextHandler handler = new ServletContextHandler();
		if (SherpaServletExample.class.getClassLoader().getResource("nl/irias/www") == null) {
			throw new Exception("resource directory nl/irias/www does not exist");
		}
		handler.setResourceBase(SherpaServletExample.class.getClassLoader().getResource("nl/irias/www").toString());

		// Prepare a handler that prevents caching, for the HTML at / (the root of the web server).
		ServletHolder noCacheStaticHandler = new ServletHolder(new DefaultServlet());
		noCacheStaticHandler.setInitParameter("cacheControl", "public, no-cache, max-age=0");

		// And a handler that allows caching, for the static files. You're expected to use cache busters when referencing static files.
		ServletHolder cacheStaticHandler = new ServletHolder(new DefaultServlet());
		cacheStaticHandler.setInitParameter("cacheControl", String.format("public, max-age=%d", 31*24*3600));

		handler.addServlet(noCacheStaticHandler, "");
		handler.addServlet(noCacheStaticHandler, "/index.html");
		handler.addServlet(cacheStaticHandler, "/static/*");


		// Sherpa sections we want to export in our API.
		Class<?>[] sections = new Class<?>[] {
			Example.class,
			Authentication.class,
		};

		// Read the documentation that was generated by sherpadoc (executed through pom.xml).
		SherpaDoc sherpaDoc;
		try (InputStream input = SherpaServletExample.class.getClassLoader().getResourceAsStream("nl/irias/example.json")) {
			sherpaDoc = new ObjectMapper().readValue(input, SherpaDoc.class);
		}
		// And add documentation about data types through Java reflection.
		SherpaDocHelper.describeData(sherpaDoc, "Authentication", User.class);


		// Prepare and mount the Sherpa API on /example/
		ThrowableFormatter formatter = new SherpaThrowableFormatter();
		ServletHolder sherpaHandler = new ServletHolder(new SherpaServlet("/example/", "example", "Example", VERSION, sections, sherpaDoc, formatter, null, new ExceptionTransformer()));
		handler.addServlet(sherpaHandler, "/example/*");

		server.setHandler(handler);

		// Fire it up!
		System.out.println(String.format("example-%s, listening on %s:%d", VERSION, BIND, PORT));
		server.start();
		server.join();
	}
}
